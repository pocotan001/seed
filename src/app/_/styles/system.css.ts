import { createSprinkles, defineProperties } from "@vanilla-extract/sprinkles";
import { vars } from "~/app/_/styles/theme";
import { media } from "~/app/_/styles/theme/tokens";

export const systemProps = defineProperties({
  conditions: {
    base: {},
    ...(Object.fromEntries(
      Object.entries(media).map(([key, condition]) => [
        key,
        { "@media": condition },
      ])
    ) as Record<keyof typeof media, any>),
  },

  defaultCondition: "base",

  properties: {
    // Layout
    aspectRatio: vars.aspectRatio,
    display: [
      "none",
      "block",
      "inline",
      "inline-block",
      "flex",
      "inline-flex",
      "grid",
      "inline-grid",
      "contents",
    ],
    objectFit: ["none", "contain", "cover", "fill", "scale-down"],
    objectPosition: [
      "left top",
      "top",
      "right top",
      "left",
      "center",
      "right",
      "left bottom",
      "bottom",
      "right bottom",
    ],
    overflow: ["visible", "hidden", "clip", "scroll", "auto"],
    position: ["static", "relative", "absolute", "fixed", "sticky"],
    inset: vars.space,
    top: vars.space,
    right: vars.space,
    bottom: vars.space,
    left: vars.space,
    zIndex: vars.zIndices,
    // Flexbox & Grid
    flex: ["none", 1] as const,
    flexBasis: vars.sizes,
    flexDirection: ["row", "row-reverse", "column", "column-reverse"],
    flexWrap: ["nowrap", "wrap", "wrap-reverse"],
    flexGrow: [0, 1] as const,
    flexShrink: [0, 1] as const,
    order: [-1, 0, 1, 2, 3, 4, 5, 6] as const,
    gridTemplateColumns: vars.gridTemplateColumns,
    gridColumn: vars.gridColumn,
    gridTemplateRows: vars.gridTemplateColumns,
    gridRow: vars.gridColumn,
    gridAutoFlow: ["row", "column"],
    gap: vars.space,
    columnGap: vars.space,
    rowGap: vars.space,
    justifyContent: [
      "center",
      "flex-start",
      "flex-end",
      "space-between",
      "space-around",
      "space-evenly",
    ],
    justifyItems: ["center", "start", "end", "stretch"],
    justifySelf: ["auto", "center", "start", "end", "stretch"],
    alignContent: [
      "center",
      "flex-start",
      "flex-end",
      "space-between",
      "space-around",
      "space-evenly",
    ],
    alignItems: ["center", "flex-start", "flex-end", "stretch"],
    alignSelf: ["auto", "center", "flex-start", "flex-end", "stretch"],
    // Spacing
    padding: vars.space,
    paddingTop: vars.space,
    paddingRight: vars.space,
    paddingBottom: vars.space,
    paddingLeft: vars.space,
    margin: vars.space,
    marginTop: vars.space,
    marginRight: vars.space,
    marginBottom: vars.space,
    marginLeft: vars.space,
    // Sizing
    width: vars.sizes,
    height: vars.sizes,
    minWidth: vars.sizes,
    maxWidth: vars.sizes,
    minHeight: vars.sizes,
    maxHeight: vars.sizes,
    // Typography
    fontFamily: vars.fonts,
    fontSize: vars.fontSizes,
    fontStyle: ["normal", "italic"],
    fontWeight: ["normal", "bold"],
    lineHeight: [1, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2] as const,
    textAlign: ["start", "end", "left", "right", "center", "justify"],
    color: vars.colors,
    textDecoration: ["none", "underline", "overline", "line-through"],
    textTransform: ["none", "capitalize", "uppercase", "lowercase"],
    verticalAlign: [
      "baseline",
      "sub",
      "super",
      "text-top",
      "text-bottom",
      "middle",
      "top",
      "bottom",
    ],
    // Backgrounds
    backgroundColor: vars.colors,
    // Borders
    borderRadius: vars.radii,
    borderWidth: vars.borderWidth,
    borderTopWidth: vars.borderWidth,
    borderRightWidth: vars.borderWidth,
    borderBottomWidth: vars.borderWidth,
    borderLeftWidth: vars.borderWidth,
    borderColor: vars.colors,
    borderStyle: ["none", "solid", "dashed", "dotted", "double", "hidden"],
  },

  shorthands: {
    // Layout
    ratio: ["aspectRatio"],
    insetX: ["left", "right"],
    insetY: ["top", "bottom"],
    // Flexbox & Grid
    basis: ["flexBasis"],
    direction: ["flexDirection"],
    wrap: ["flexWrap"],
    grow: ["flexGrow"],
    shrink: ["flexShrink"],
    cols: ["gridTemplateColumns"],
    col: ["gridColumn"],
    rows: ["gridTemplateRows"],
    row: ["gridRow"],
    flow: ["gridAutoFlow"],
    gapX: ["columnGap"],
    gapY: ["rowGap"],
    justify: ["justifyContent"],
    content: ["alignContent"],
    items: ["alignItems"],
    self: ["alignSelf"],
    // Spacing
    p: ["padding"],
    pt: ["paddingTop"],
    pr: ["paddingRight"],
    pb: ["paddingBottom"],
    pl: ["paddingLeft"],
    px: ["paddingLeft", "paddingRight"],
    py: ["paddingTop", "paddingBottom"],
    m: ["margin"],
    mt: ["marginTop"],
    mr: ["marginRight"],
    mb: ["marginBottom"],
    ml: ["marginLeft"],
    mx: ["marginLeft", "marginRight"],
    my: ["marginTop", "marginBottom"],
    // Sizing
    w: ["width"],
    h: ["height"],
    minW: ["minWidth"],
    maxW: ["maxWidth"],
    minH: ["minHeight"],
    maxH: ["maxHeight"],
    // Backgrounds
    bg: ["backgroundColor"],
    // Borders
    rounded: ["borderRadius"],
  },
});

export const system = createSprinkles(systemProps);
export type SystemProps = Parameters<typeof system>[0];
